default: all
DESTDIR ?= .
BLD ?= bld
CUSTOM ?= n
CONFIG_ENABLE_FCS32 ?= y
CONFIG_ENABLE_FCS16 ?= y
CONFIG_ENABLE_CHECKSUM ?= y
LOG_LEVEL ?=
ifeq ($(ENABLE_LOGS),y)
    ENABLE_HDLC_LOGS ?= y
    ENABLE_FD_LOGS ?= y
endif

VERSION=1.0.0

CPPFLAGS += -I./src

CFLAGS += -std=gnu99
CPPFLAGS += -Os -Wall -Werror -ffunction-sections -fdata-sections $(EXTRA_CPPFLAGS)
# Uncomment for performance profiling
# CPPFLAGS += -pg
CXXFLAGS += -std=c++17

ifeq ($(ENABLE_FILE_LOGS),y)
    CPPFLAGS += -DTINY_FILE_LOGGING
endif

ifeq ($(ABORT_ON_ERROR),y)
    CPPFLAGS += -DTINY_ABORT_ON_ERROR
endif

ifneq ($(LOG_LEVEL),)
    CPPFLAGS += -DTINY_LOG_LEVEL_DEFAULT=$(LOG_LEVEL)
endif

ifeq ($(CUSTOM),y)
    CPPFLAGS += -DTINY_CUSTOM_PLATFORM=1
endif

ifeq ($(ENABLE_HDLC_LOGS),y)
    CPPFLAGS += -DTINY_HDLC_DEBUG=1
    ENABLE_DEBUG=y
endif
ifeq ($(ENABLE_FD_LOGS),y)
    CPPFLAGS += -DTINY_FD_DEBUG=1
    ENABLE_DEBUG=y
endif
ifeq ($(CONFIG_ENABLE_CPP_HAL),y)
    CPPFLAGS += -DCONFIG_ENABLE_CPP_HAL=1
endif
ifeq ($(ENABLE_DEBUG),y)
    CPPFLAGS += -DTINY_DEBUG=1
endif
ifeq ($(CONFIG_ENABLE_FCS32),y)
    CPPFLAGS += -DCONFIG_ENABLE_FCS32
endif

ifeq ($(CONFIG_ENABLE_FCS16),y)
    CPPFLAGS += -DCONFIG_ENABLE_FCS16
endif

ifeq ($(CONFIG_ENABLE_CHECKSUM),y)
    CPPFLAGS += -DCONFIG_ENABLE_CHECKSUM
endif

ifeq ($(CONFIG_ENABLE_STATS),y)
    CPPFLAGS += -DCONFIG_ENABLE_STATS
endif

.PHONY: prep clean library all install docs release

####################### Compiling library #########################

TARGET_LIB ?= libtinyprotocol.a

OBJ_LIB += \
        src/proto/crc/tiny_crc.o \
        src/proto/light/tiny_light.o \
        src/proto/hdlc/high_level/hdlc.o \
        src/proto/hdlc/low_level/hdlc.o \
        src/proto/fd/tiny_fd.o \
        src/proto/fd/tiny_fd_frames.o \
        src/hal/tiny_list.o \
        src/hal/tiny_debug.o \
        src/hal/tiny_types.o \
        src/hal/tiny_types_cpp.o \
        src/hal/tiny_serial.o \
	src/hal/tiny_serial_cpp.o \
        src/TinyProtocolHdlc.o \
        src/TinyProtocolFd.o \
        src/TinyLightProtocol.o \
	src/TinyProtocol.o \
	src/link/TinyLinkLayer.o \
	src/link/TinyFdLinkLayer.o \
	src/link/TinyHdlcLinkLayer.o \
	src/link/TinySerialLinkLayer.o \
	src/link/TinySerialFdLink.o \
	src/link/TinySerialHdlcLink.o \
	src/interface/TinySerial.o \

prep:
ifdef CONFIG_FOR_WINDOWS_BUILD
	if not exist $(BLD) mkdir $(BLD)
else
	mkdir -p $(BLD)
endif

library: prep $(OBJ_LIB)
	$(AR) rcs $(BLD)/$(TARGET_LIB) $(OBJ_LIB)

install: library
ifdef CONFIG_FOR_WINDOWS_BUILD
	if not exist $(DESTDIR)\include mkdir $(DESTDIR)\include &\
	xcopy src $(DESTDIR)\include /y /s &\
	for /R $(DESTDIR)\include %%G in (*) do ( if not %%~xG==.h del /F/Q/S %%G )
else
	mkdir -p $(DESTDIR)/include $(DESTDIR)/lib
	cp -r $(BLD)/$(TARGET_LIB) $(DESTDIR)/lib/
	DST=`realpath $(DESTDIR)` && cd src && find ./ -name \*.h -not -name \*_int.h -exec cp --parents {} $${DST}/include/ \; && cd ..
endif

docs:
	doxygen doxygen.cfg

all: library

clean:
ifdef CONFIG_FOR_WINDOWS_BUILD
	if exist $(BLD) rd $(BLD) /q /s &\
	for /R .\src\ %%G in (*.o) do ( del /F/Q/S %%G )
else
	rm -rf $(BLD)
	rm -rf $(OBJ_LIB) $(OBJ_LIB:.o=.gcno) $(OBJ_LIB:.o=.gcda) $(OBJ_LIB:.o=.gcov)
	rm -rf gmon.out
endif
